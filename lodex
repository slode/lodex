#!/usr/bin/env python3

import argparse
import sys
from liblodex import Lodex

db_parser = argparse.ArgumentParser(add_help=False)
db_parser.add_argument(
        "--db", type=str, default="database.ldx", metavar="path",
        help="the database path (default 'database.ldx')")
key_parser = argparse.ArgumentParser(add_help=False)
key_parser.add_argument("key")
value_parser = argparse.ArgumentParser(add_help=False)
value_parser.add_argument("value")
sep_parser = argparse.ArgumentParser(add_help=False)
sep_parser.add_argument(
        "--sep", type=str, default="\t",
        help="key-value separator (default: '\\t')")

parser = argparse.ArgumentParser(
        description='An api interfacing a ldx database.')
sub_parsers = parser.add_subparsers(dest="operation")
_ = sub_parsers.add_parser(
        "put", help="add key-value pair",
        parents=[db_parser, key_parser, value_parser])
_ = sub_parsers.add_parser(
        "get", help="retrieve a value",
        parents=[db_parser, key_parser])
_ = sub_parsers.add_parser(
        "delete", help="delete a value",
        parents=[db_parser, key_parser])
_ = sub_parsers.add_parser(
        "stats", help="print database metrics",
        parents=[db_parser])
_ = sub_parsers.add_parser(
        "dump", help="print key-values to stdout",
        parents=[db_parser, sep_parser])
_ = sub_parsers.add_parser(
        "find", help="print values of keys from stdin",
        parents=[db_parser])
_ = sub_parsers.add_parser(
        "load", help="add key-value pairs from stdout",
        parents=[db_parser, sep_parser])

args = parser.parse_args()

if args.operation:
    db = Lodex(args.db)
    try:
        if args.operation == "put":
            db.put(args.key, args.value)
            db.commit()
        elif args.operation == "get":
            val = db.get(args.key)
            print(val)
        elif args.operation == "delete":
            db.delete(args.key)
            db.commit()
        elif args.operation == "stats":
            counter = [0]

            def item_counter(_1, _2):
                counter[0] += 1
            db.walk(item_counter)
            print("db:\t{}\nitems:\t{}\nsize:\t{}".format(
                db.filename, counter[0], len(db)))
        elif args.operation == "dump":
            sep = args.sep.encode("utf-8").decode("unicode_escape")

            def item_printer(key, value):
                print("{}{}{}".format(key, sep, value))
            db.walk(item_printer)
        elif args.operation == "load":
            sep = args.sep.encode("utf-8").decode("unicode_escape")
            for line in sys.stdin:
                key, value = line.split(sep)
                db.put(key, value.rstrip())
            db.commit()
        elif args.operation == "find":
            for key in sys.stdin:
                print(db.get(key.rstrip()))
    except BaseException as e:
        sys.stderr.write(repr(e))
        exit(1)
    finally:
        db.close()
else:
    parser.print_help()

