#!/usr/bin/env python3

import argparse
import json
import sys
from liblodex import Lodex

db_parser = argparse.ArgumentParser(add_help=False)
db_parser.add_argument(
        "--db", type=str, default="database.ldx", metavar="path",
        help="the database path (default 'database.ldx')")
doc_parser = argparse.ArgumentParser(add_help=False)
doc_parser.add_argument("doc")

parser = argparse.ArgumentParser(
        description='An api interfacing a ldx database.')
sub_parsers = parser.add_subparsers(dest="operation")
_ = sub_parsers.add_parser(
        "put", help="add document",
        parents=[db_parser, doc_parser])
_ = sub_parsers.add_parser(
        "get", help="retrieve a document",
        parents=[db_parser, doc_parser])
_ = sub_parsers.add_parser(
        "delete", help="delete a document",
        parents=[db_parser, doc_parser])
_ = sub_parsers.add_parser(
        "stats", help="print database metrics",
        parents=[db_parser])
_ = sub_parsers.add_parser(
        "dump", help="print documents to stdout",
        parents=[db_parser])
_ = sub_parsers.add_parser(
        "load", help="add documents pairs from stdout",
        parents=[db_parser])

args = parser.parse_args()

if args.operation:
    db = Lodex(args.db)
    try:
        if args.operation == "put":
            print(json.dumps(db.put(json.loads(args.doc))))
            db.commit()
        elif args.operation == "get":
            print(json.dumps(db.get(json.loads(args.doc))))
        elif args.operation == "delete":
            print(json.dumps(db.delete(json.loads(args.doc))))
            db.commit()
        elif args.operation == "stats":
            counter = [0]

            def item_counter(_1):
                counter[0] += 1
            db.walk(item_counter)
            stats = {
                "db" : db.filename,
                "items": counter[0],
                "size": len(db),
                "indices": list(db.get_indices())
            }
            print(json.dumps(stats))
        elif args.operation == "dump":
            def item_printer(doc):
                print(json.dumps(doc))
            db.walk(item_printer)
        elif args.operation == "load":
            for line in sys.stdin:
                db.put(json.loads(line))
            db.commit()
    except BaseException as e:
        raise
        sys.stderr.write(repr(e))
        exit(1)
    finally:
        db.close()
else:
    parser.print_help()

